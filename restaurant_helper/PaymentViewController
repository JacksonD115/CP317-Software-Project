//
//  PaymentViewController.swift
//  Resturant_Helper
//


import Foundation
import FirebaseDatabase
import UIKit
import StoreKit

class PaymentViewController: UIViewController {
    
    var ref = Database.database().reference()
    private var tableNumber: Int = 0
    var tip: Double = 15.0
    var restaurantID = 0
    
    
    init(tableNumber: Int) {
        self.tableNumber = tableNumber
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private let subtotalLabel: UILabel = {
        let label = UILabel()
        label.text = "Subtotal: $0.00"
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 20)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let tipSliderLabel: UILabel = {
        let label = UILabel()
        label.text = "Leave A Tip:"
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 20)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let tipLabel: UILabel = {
        let label = UILabel()
        label.text = "Tip: $0.00"
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 20)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private var orderPriceLabel: UILabel = {
        let label = UILabel()
        label.text = "Order Price: $0.00"
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 20)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let tipSlider: UISlider = {
        let slider = UISlider()
        slider.minimumValue = 0
        slider.maximumValue = 100
        slider.value = 15
        slider.translatesAutoresizingMaskIntoConstraints = false
        return slider
    }()
    
    private let percentageLabel: UILabel = {
        let label = UILabel()
        label.text = "15%"
        label.font = UIFont.systemFont(ofSize: 15)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let payButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = .systemGreen
        button.setTitle("Pay Now", for: .normal)
        button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 18)
        button.setTitleColor(.white, for: .normal)
        button.layer.cornerRadius = 10
        button.addTarget(self, action: #selector(payButtonTapped), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        
        view.addSubview(subtotalLabel)
        view.addSubview(tipSlider)
        view.addSubview(percentageLabel)
        view.addSubview(tipLabel)
        view.addSubview(orderPriceLabel)
        view.addSubview(payButton)
        view.addSubview(tipSliderLabel)
        
        fetchOrderPrice()
        
        tipSlider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)
        
        NSLayoutConstraint.activate([
            
            tipSliderLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            tipSliderLabel.bottomAnchor.constraint(equalTo: tipSlider.topAnchor, constant: -40),
            
            tipSlider.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: -50),
            tipSlider.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            tipSlider.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 40),
            tipSlider.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -40),

            percentageLabel.bottomAnchor.constraint(equalTo: tipSlider.topAnchor, constant: -10),
            percentageLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),

            orderPriceLabel.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -200),
            orderPriceLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),

            tipLabel.topAnchor.constraint(equalTo: orderPriceLabel.bottomAnchor, constant: 15),
            tipLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),

            subtotalLabel.topAnchor.constraint(equalTo: tipLabel.bottomAnchor, constant: 15),
            subtotalLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            payButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20),
            payButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 40),
            payButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -40),
            payButton.heightAnchor.constraint(equalToConstant: 50)
        ])
    }
    
    private func fetchOrderPrice() {
        ref.child("tableStatuses").child("table\(tableNumber)").child("totalPrice").observe(.value) { [weak self] snapshot in
            guard let self = self else { return }
            
            if let orderPrice = snapshot.value as? Double {
                DispatchQueue.main.async {
                    let priceWithTax = orderPrice * 1.13
                    let tipAmount = orderPrice * (self.tip / 100)
                    let totalWithTip = (priceWithTax + tipAmount)
                    
                    self.orderPriceLabel.text = String(format: "Total: $%.2f", orderPrice)
                    self.tipLabel.text = String(format: "Tip $%.2f", tipAmount)
                    self.subtotalLabel.text = String(format: "Subtotal: $%.2f", totalWithTip)
                }
            } else {
                DispatchQueue.main.async {
                    self.orderPriceLabel.text = "Total: $0.00"
                    self.tipLabel.text = "Tip: $0.00"
                    self.subtotalLabel.text = "Total: $0.00"
                }
            }
        }
    }
    
    @objc func sliderValueChanged(_ sender: UISlider) {
        tip = Double(sender.value)
        percentageLabel.text = "\(Int(tip))%"
        
        var taxPercent: Double = 1.0
        
        ref.child("restaurants").child("\(restaurantID)").child("taxRate").observeSingleEvent(of: .value) { [weak self] snapshot in
            guard let self = self else { return }
            if let taxRate = snapshot.value as? Double {
                let taxPercent = 1 + (taxRate / 100)
            
        
        
                ref.child("tableStatuses").child("table\(tableNumber)").child("totalPrice").observeSingleEvent(of: .value) { [weak self] snapshot in
                    guard let self = self else { return }
                    
                    if let orderPrice = snapshot.value as? Double {
                        DispatchQueue.main.async {
                            let priceWithTax = orderPrice * taxPercent
                            let tipAmount = orderPrice * (self.tip / 100)
                            let totalWithTip = priceWithTax + tipAmount
                            
                            self.tipLabel.text = String(format: "Tip: $%.2f", tipAmount)
                            
                            self.subtotalLabel.text = String(format: "Subtotal: $%.2f", totalWithTip)
                        }
                    }
                }
            }
        }
    }

    
    @objc func payButtonTapped() {
        let alertController = UIAlertController(title: "Confirm Payment", message: "Do you want to proceed with the payment", preferredStyle: .alert)
        let confirmAction = UIAlertAction(title: "Confirm", style: .default) { [weak self] _ in
            guard let self = self else { return }
            self.setOrderToPaid()
            
            let successAlert = UIAlertController(title: "Payment Successful", message: "Thank you for your payment", preferredStyle: .alert)
            navigationController?.popViewController(animated: true)
            
            successAlert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(successAlert, animated: true, completion: nil)
        }
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        alertController.addAction(confirmAction)
        alertController.addAction(cancelAction)
        
        present(alertController, animated: true, completion: nil)
    }
    
    @objc func setOrderToPaid() {
        ref.child("tableStatuses").child("table\(tableNumber)").child("hasPaid").setValue(true)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        ref.child("restaurants").child("\(restaurantID)").child("taxRate").observeSingleEvent(of: .value) { [weak self] snapshot in
            guard let self = self else { return }
            if let taxRate = snapshot.value as? Double {
                let taxPercent = 1 + taxRate / 100
                
                ref.child("tableStatuses").child("table\(tableNumber)").child("totalPrice").observeSingleEvent(of: .value) { [weak self] snapshot, _ in
                    guard let self = self else { return }
                    
                    if let orderPrice = snapshot.value as? Double {
                        DispatchQueue.main.async {
                            let priceWithTax = orderPrice * taxPercent
                            self.orderPriceLabel.text = String(format: "Total: $%.2f", (priceWithTax))
                        }
                    } else {
                        DispatchQueue.main.async {
                            self.orderPriceLabel.text = "Total: $0.00"
                        }
                    }
                }
            } else {
                DispatchQueue.main.async {
                    self.orderPriceLabel.text = "Total: $0.00"
                }
            }
        }
    }
}
//Create adjustable tax
